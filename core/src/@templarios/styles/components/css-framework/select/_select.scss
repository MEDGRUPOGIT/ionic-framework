[tp-container-select] {
  --padding: 12px 8px 12px 16px;
  --background: hsl(var(--med-color-neutral-2));
  --color: hsl(var(--med-color-neutral-10));
  --border-radius: 8px;
  --height: 40px;
  --padding-item: 12px 16px;
  --border-color: hsl(var(--med-color-neutral-4));
  --background-list: hsl(var(--med-color-neutral-3));
  --border-radius-list: 0 0 8px 8px;
  --display-content: none;
  --stroke: hsl(var(--med-color-neutral-6));

  position: relative;

  [tp-select] {
    display: none;
  }

  .med-icon {
    height: 24px;
    width: 24px;
    stroke: var(--stroke);
  }
}

[tp-label] {
  color: var(--color);

  &+[tp-container-select] {
    margin-top: 8px;
  }
}

[tp-select-header] {
  cursor: pointer;
  padding: var(--padding);
  background: var(--background);
  color: var(--color);
  border-radius: var(--border-radius);
  height: var(--height);
  display: flex;
  align-items: center;
  justify-content: space-between;
}

[tp-select-content] {
  display: var(--display-content);
  position: absolute;
  left: 0;
  top: 40px;
  width: 100%;
  z-index: 10;

  [tp-select-list] {
    list-style: none;
    margin: 0;
    padding: 0;
    background: var(--background-list);
    border-radius: var(--border-radius-list);
    max-height: 224px;
    overflow: auto;
  }

  [tp-select-item] {
    padding: var(--padding-item);
    cursor: pointer;

    &:not(:last-child) {
      border-bottom: 1px solid var(--border-color);
    }
  }
}

//
// open
//
[tp-container-select].open {
  [tp-select-header] {
    --border-radius: 8px 8px 0 0;
  }

  .med-icon {
    transform: rotate(180deg);
  }

  [tp-select-content] {
    --display-content: block;
  }
}

//
// name
//
[tp-container-select][ds-name="secondary"] {
  --background: hsl(var(--med-color-neutral-3));
  --background-list: hsl(var(--med-color-neutral-4));
  --border-color: hsl(var(--med-color-neutral-5));
}

//
// disabled
//
[tp-container-select][disabled] {
  opacity: 0.4;

  [tp-select-header],
  [tp-select-item] {
    cursor: default;
  }
}

//
// color
//
@each $color in $tp-color {
  @for $i from 1 through 5 {
    @include generate-component-color([tp-container-select], $color, $i) {
      --background: #{tp-color($color, $i)};
      --color: #{tp-contrast-color($i)};
      --border-color: #{tp-contrast-color($i)};
      --background-list: #{tp-color($color, 4)};
      --stroke: #{tp-contrast-color($i)};
    }
  }
}

//
// neutral
//
@for $i from 1 through 10 {

  @include generate-component-neutral([tp-container-select],
    neutral-#{$i},
    $i ) {
    --background: #{tp-neutral($i)};
    --color: #{tp-contrast-neutral($i)};
    --border-color: #{tp-contrast-neutral($i)};
    --background-list: #{tp-neutral($i + 1)};
    --stroke: #{tp-contrast-neutral($i)};
  }
}

@for $i from 1 through 9 {

  @include generate-component-neutral([tp-container-select],
    neutral-#{$i}#{5},
    $i ) {
    --background: #{tp-neutral($i)};
    --color: #{tp-contrast-neutral($i)};
    --border-color: #{tp-contrast-neutral($i)};
    --background-list: #{tp-neutral($i + 1)};
    --stroke: #{tp-contrast-neutral($i)};
  }
}

//
// feedback
//
@each $color in $tp-feedback {

  @include generate-component-feedback([tp-container-select],
    fb-#{$color},
    $color ) {
    --background: #{tp-feedback($color)};
    --color: hsl(var(--med-color-neutral-1));
    --border-color: hsl(var(--med-color-neutral-1));
    --background-list: #{tp-feedback($color)};
    --stroke: hsl(var(--med-color-neutral-1));
  }
}